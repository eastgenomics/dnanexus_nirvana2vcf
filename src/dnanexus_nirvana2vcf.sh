#!/bin/bash
set -e -x -o pipefail

# dnanexus_nirvana2vcf 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of json_file: '$json_file'"
    echo "Value of json_file_name: '$json_file_name'"
    echo "Value of vcf_file: '$vcf_file'"
    echo "Value of vcf_file_name: '$vcf_file_name'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$json_file" -o input.json.gz
    dx download "$vcf_file" -o input.vcf

    # Fill in your application code here.

    # We provide both raw vcf and the json annotation as input
    # The python script uses the vcf to check that all variants are present in the json
    # Check that both files are for the same sample, if not then exit

    if [ $json_file_prefix != $vcf_file_prefix ]; then
        echo "Sample id mismatch"
        echo "JSON: $json_file_prefix"
        echo "VCF: $vcf_file_prefix"

    fi

    output_vcf_name="${json_file_prefix}.refseq_nirvana_203.annotated.vcf"
        
    nirvana2vcf.py -j input.json.gz -v input.vcf -o $output_vcf_name

    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    output_vcf=$(dx upload $output_vcf_name --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output output_vcf "$output_vcf" --class=file
}
